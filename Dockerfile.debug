# Dockerfile para debug no EasyPanel
FROM node:22-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm@10.14.0

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache python3 make g++ && ln -sf python3 /usr/bin/python

# ================================
# Dependencies stage
# ================================
FROM base AS deps

# Copy package files
COPY package.json pnpm-lock.yaml* ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# ================================
# Build stage  
# ================================
FROM base AS builder

WORKDIR /app

# Copy package files and install dependencies
COPY package.json pnpm-lock.yaml* ./
RUN pnpm install --frozen-lockfile

# Copy source files
COPY server/ ./server/
COPY shared/ ./shared/
COPY vite.config.server.ts ./
COPY tsconfig.json ./

# Build server
RUN pnpm run build:server

# Verify build output
RUN ls -la dist/server/ && \
    test -f dist/server/production.mjs || (echo "Build failed: production.mjs not found" && exit 1)

# ================================
# Production stage
# ================================
FROM node:22-alpine AS production

# Install pnpm
RUN npm install -g pnpm@10.14.0

WORKDIR /app

# Create user
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# Copy package files
COPY package.json pnpm-lock.yaml* ./

# Install production dependencies with verbose logging
RUN echo "=== INSTALLING PRODUCTION DEPENDENCIES ===" && \
    pnpm install --prod --frozen-lockfile && \
    echo "=== CHECKING CORS MODULE ===" && \
    ls -la node_modules/ | grep cors || echo "CORS NOT FOUND" && \
    echo "=== DEPENDENCIES INSTALLED ===" && \
    pnpm list --prod

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist

# Copy shared folder
COPY --chown=nextjs:nodejs shared ./shared

# Create .env file
RUN echo "NODE_ENV=production" > .env && \
    echo "PORT=80" >> .env && \
    chown nextjs:nodejs .env

# Set user
USER nextjs

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node -e "fetch('http://localhost:80/api/ping').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"

# Environment variables
ENV NODE_ENV=production
ENV PORT=80

# Debug command to check dependencies before starting
RUN echo "=== FINAL CHECK ===" && \
    node -e "console.log('Node version:', process.version)" && \
    node -e "try { require('cors'); console.log('✅ CORS module found'); } catch(e) { console.log('❌ CORS module missing:', e.message); }"

# Start the application
CMD ["node", "dist/server/production.mjs"]
