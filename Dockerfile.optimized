# Multi-stage Dockerfile otimizado para API Node.js
# Etapa 1 - Build da aplicação
FROM node:22-alpine AS builder

WORKDIR /app

# Copiar arquivos de dependências primeiro (cache layer)
COPY package.json ./

# Instalar TODAS as dependências (dev + prod) para o build
RUN npm install

# Copiar código fonte
COPY . .

# Build da aplicação (frontend + backend)
RUN npm run build

# Etapa 2 - Runtime otimizado
FROM node:22-alpine AS runtime

# Instalar apenas curl para health check
RUN apk add --no-cache curl

WORKDIR /app

# Copiar apenas package.json para instalar dependências de produção
COPY package.json ./

# Instalar APENAS dependências de produção
RUN npm install --only=production && npm cache clean --force

# Copiar build da etapa anterior
COPY --from=builder /app/dist ./dist

# Copiar arquivos estáticos se necessário
COPY --from=builder /app/public ./public

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

USER nodejs

# Expor porta 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Comando para iniciar o servidor
CMD ["node", "dist/server/production.mjs"]
